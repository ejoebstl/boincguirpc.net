<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BoincCore</name>
    </assembly>
    <members>
        <member name="T:Boinc.Project">
            <summary>
            This class wraps a Boinc project. 
            <remarks>
            Instances of this class do not update automatically. Use the BoincClient class to get an updated copy
            for each project. 
            </remarks>
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationSuspend">
            <summary>
            Boinc operation code for project suspend. 
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationResume">
            <summary>
            Boinc operation code for project resume. 
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationReset">
            <summary>
            Boinc operation code for project reset. 
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationDetach">
            <summary>
            Boinc operation code for project detach. 
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationUpdate">
            <summary>
            Boinc operation code for project update. 
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationAllowMoreWork">
            <summary>
            Boinc operation code for project allowing more work. 
            </summary>
        </member>
        <member name="F:Boinc.Project.OperationNoMoreWork">
            <summary>
            Boinc operation code for project allowing no more work. 
            </summary>
        </member>
        <member name="M:Boinc.Project.#ctor(System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.String,Boinc.BoincClient)">
            <summary>
            Creates a new instance of this class. 
            </summary>
            <param name="allowMoreWork">A bool indicating if more work is allowed</param>
            <param name="diskUsage">The disk usage of this project, in megabyte</param>
            <param name="suspended">A bool indicating if this project was suspended</param>
            <param name="hasEnded">A bool indicating if this project hsa ended</param>
            <param name="masterUrl">The master url of this project</param>
            <param name="projectName">The name of this project</param>
            <param name="client">The Boinc client associated with this project</param>
        </member>
        <member name="M:Boinc.Project.Detach">
            <summary>
            Detaches the Boinc client from this project.
            </summary>
        </member>
        <member name="M:Boinc.Project.AllowMoreWork">
            <summary>
            Detaches the Boinc client from this project.
            </summary>
        </member>
        <member name="M:Boinc.Project.DisallowMoreWork">
            <summary>
            Detaches the Boinc client from this project.
            </summary>
        </member>
        <member name="M:Boinc.Project.Resume">
            <summary>
            Resumes project calculation. 
            </summary>
        </member>
        <member name="M:Boinc.Project.Suspend">
            <summary>
            Suspends project calculation.
            </summary>
        </member>
        <member name="M:Boinc.Project.GetResults(System.Boolean)">
            <summary>
            Gets all results for this project from Boinc.
            </summary>
            <returns>All results for this project.</returns>
        </member>
        <member name="P:Boinc.Project.MoreWorkAllowed">
            <summary>
            Gets or sets a bool specifying whether this project should allow more work.
            </summary>
        </member>
        <member name="P:Boinc.Project.Suspended">
            <summary>
            Gets or sets a bool specifying whether the project was suspended.
            </summary>
        </member>
        <member name="P:Boinc.Project.DiskUsage">
            <summary>
            Gets this project’s disk usage in megabyte.
            </summary>
        </member>
        <member name="P:Boinc.Project.HasEnded">
            <summary>
            Gets a bool indicating whether this project has ended.
            </summary>
        </member>
        <member name="P:Boinc.Project.MasterUrl">
            <summary>
            Gets the project’s master url.
            </summary>
        </member>
        <member name="P:Boinc.Project.ProjectName">
            <summary>
            Gets the project’s name.
            </summary>
        </member>
        <member name="T:Boinc.FilterStream">
            <summary>
            This classs provides a wrapper stream 
            which checks for the ASCII char 0x03 (End-Of-Text) in all read bytes and
            replaces them with space chars. 
            Also, all spaces before the closing slashes of XML tags are stripped. 
            </summary>
        </member>
        <member name="M:Boinc.FilterStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of this class. 
            </summary>
            <param name="baseStream">The stream to invoke all operations on. </param>
        </member>
        <member name="M:Boinc.FilterStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the given amount of bytes from the baseStream object and 
            replaces all occuring End-Of-Text chars with spaces. 
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset where copying into the buffer starts.</param>
            <param name="count">The count of bytes to read. </param>
            <returns>An int indicating how much bytes were read into the buffer.</returns>
        </member>
        <member name="M:Boinc.FilterStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Strips all spaces before the closing slash of any html tag and then calls
            the Write method of the base stream.
            <remarks>
            The given data has to be convertible into an ASCII string. 
            If count is smaller than three, the data is passed to the base stream 
            without modifications. 
            </remarks>
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset where copying from the buffer starts.</param>
            <param name="count">The count of bytes to write.</param>
        </member>
        <member name="M:Boinc.FilterStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Boinc.FilterStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Boinc.FilterStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:Boinc.FilterStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Boinc.FilterStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Boinc.FilterStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Boinc.FilterStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Boinc.FilterStream.Position">
            <inheritdoc />
        </member>
        <member name="T:Boinc.ProxySettings">
            <summary>
            This class wraps Boinc proxy settings. 
            </summary>
        </member>
        <member name="M:Boinc.ProxySettings.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of this class and stores the parameters into their corresponding properties. 
            </summary>
            <param name="password">The password.</param>
            <param name="proxyServer">The hostname of the proxy server.</param>
            <param name="username">The username.</param>
        </member>
        <member name="P:Boinc.ProxySettings.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:Boinc.ProxySettings.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:Boinc.ProxySettings.ProxyServer">
            <summary>
            Gets the hostname of the proxy server.
            </summary>
        </member>
        <member name="T:Boinc.Result">
            <summary>
            This class wraps a result of the Boinc application. 
            </summary>
        </member>
        <member name="M:Boinc.Result.#ctor">
            <summary>
            Creates a new instance of this class. 
            </summary>
        </member>
        <member name="T:Boinc.Preferences">
            <summary>
            This class represents Boinc preferences. 
            </summary>
        </member>
        <member name="M:Boinc.Preferences.#ctor(System.Boolean,System.Boolean,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a new instance of this class, storing the given parameters. 
            </summary>
            <param name="runOnBatteries">A bool indicating whether Boinc should run if the computer
            runs on batteries.</param>
            <param name="useGpuIfUserActive">A bool indicating whether Boinc should use the gpu for calculations.</param>
            <param name="cpuUsageLimit">A float number indicating the cpu usage limit in percent.</param>
            <param name="diskUsageLimit">A float number indicating the maximum disk usage in gigabyte.</param>
            <param name="cpuCountLimit">An integer indicating the maxmimum count of processor cores to use.</param>
        </member>
        <member name="P:Boinc.Preferences.RunOnBatteries">
            <summary>
            Gets a bool indicating whether Boinc should run if the computer
            runs on batteries. 
            </summary>
        </member>
        <member name="P:Boinc.Preferences.UseGpuIfUserIsActive">
            <summary>
            Gets a bool indicating whether Boinc should use the gpu for calculations
            even if the user is active.
            </summary>
        </member>
        <member name="P:Boinc.Preferences.CpuUsageLimit">
            <summary>
            Gets a float number indicating the cpu usage limit in percent. 
            </summary>
        </member>
        <member name="P:Boinc.Preferences.DiskUsageLimit">
            <summary>
            Gets a float indicating the disk usage limit in gigabyte. 
            </summary>
        </member>
        <member name="P:Boinc.Preferences.CpuCountLimit">
            <summary>
            Gets an integer indicating the maxmimum count of processor cores to use.
            </summary>
        </member>
        <member name="T:Boinc.BoincClient">
            <summary>
            This class wraps the remote procedure call interface of Boinc and 
            provides ways to change configuration or to gather information 
            from the Boinc application. 
            </summary>
            <remarks>
            Notes on the Boinc Xml parser: 
            * Boinc uses ASCII 0x03 (End-Of-Text) after each message, which has to be filtered
              out on receiving, or .NET's XmlReader will crash. 
            * Boinc stores booleans in Xml the following way: If an node 
              with the corresponding name exists, the value is true, otherwise false. 
            * Boinc does not handle whitespace in self-ending Xml tags well, use a seperate
              start and end tag instead. 
              
            Notes on the parsing in this class:
            * This class uses Lambda expressions to recursively parse Xml. For each method, the following
              scheme applies: First, read the start element with the given name, then, execute the given action, 
              finally, read the end element with the given name. 
            </remarks>
            <example>
              The expression
              <code>
                ReadBoincRequest(() => { ReadElement("Test", () => { ReadValue(); }); });
              </code>  
              reads Xml with the structure 
              <code>
              <![CDATA[ 
                <boinc_gui_rpc_request>
                   <test>
                        Value
                    </test>
                 </boinc_gui_rpc_request>
              ]]>
              </code>
            </example>
        </member>
        <member name="F:Boinc.BoincClient.boincDir">
            <summary>
            The name of the boinc configuration directory
            </summary>
        </member>
        <member name="F:Boinc.BoincClient.boincExecutable">
            <summary>
            The name of the boinc executable file
            </summary>
        </member>
        <member name="F:Boinc.BoincClient.guiRpcAuthFile">
            <summary>
            The name of the boinc gui rpc auth configuration file, which holds the password for rpc authentication
            </summary>
        </member>
        <member name="F:Boinc.BoincClient.port">
            <summary>
            The TCP Port where the Boinc client is listening. 
            </summary>
        </member>
        <member name="F:Boinc.BoincClient.host">
            <summary>
            The hostname or address of the Boinc client as string. 
            </summary>
        </member>
        <member name="F:Boinc.BoincClient.password">
            <summary>
            The password of the Boinc client. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.StartClient">
            <summary>
            Starts Boinc. 
            </summary>
            <remarks>
            This method throws an exception if boinc is already started. 
            </remarks>
        </member>
        <member name="M:Boinc.BoincClient.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new instance of this class associated with the connection 
            specified by the given parameters.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="password">The Boinc application’s password. 
            If this parameter is set to null and the host is localhost, the password is automatically retreived
            from the boinc configuration file.</param>
            <param name="autoStartBoinc">A bool indicating whether Boinc should automatically be started on the local host, 
            if it is not already running.</param>
        </member>
        <member name="M:Boinc.BoincClient.SetPreferences(Boinc.Preferences)">
            <summary>
            Applies the given override preferences to Boinc.
            </summary>
            <param name="prefs">The preferences to apply.</param>
        </member>
        <member name="M:Boinc.BoincClient.GetPreferences">
            <summary>
            Returns the override preferences of Boinc.
            If no override preferences exist, the default
            preferences are returned. 
            </summary>
            <returns>The Boinc override preferences.</returns>
        </member>
        <member name="M:Boinc.BoincClient.GetProxySettings">
            <summary>
            Gets the HTTP proxy settings of Boinc. 
            </summary>
            <returns>The HTTP proxy settings or null, if no proxy is set.</returns>
        </member>
        <member name="M:Boinc.BoincClient.SetProxySettings(Boinc.ProxySettings)">
            <summary>
            Sets the HTTP proxy settings of Boinc.
            </summary>
            <param name="proxy">The HTTP proxy settings to set, or null to erase the settings.</param>
        </member>
        <member name="M:Boinc.BoincClient.AttachToProject(System.String,System.String,System.String)">
            <summary>
            Attaches the client to a new project.
            </summary>
            <param name="url">The url of the project to attach to.</param>
            <param name="accountKey">The account key of the user.</param>
            <param name="projectName">The name of the project to attach to.</param>
        </member>
        <member name="M:Boinc.BoincClient.Close">
            <summary>
            Closes the underlying connection.
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.Connect">
            <summary>
            Opens the underlying connection. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.PerformAuth">
            <summary>
            Reads the authentication salt and performs the authentication with Boinc. 
            StartAuth() must have been called first. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.StartAuth">
            <summary>
            Starts the authentication process
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.GetProjects">
            <summary>
            Gets all projects which are currently running. 
            </summary>
            <returns>All projects which are currently running as enumeration of Project objects. </returns>
        </member>
        <member name="M:Boinc.BoincClient.ParseProject">
            <summary>
            Parses a project from the current XmlReader
            </summary>
            <returns>The parsed project object</returns>
        </member>
        <member name="M:Boinc.BoincClient.WriteProjectOp(System.String,System.String)">
            <summary>
            Sends the given project operation for the project with the given url to Boinc.
            </summary>
            <param name="projectUrl">The project url.</param>
            <param name="projectOp">The project operation.</param>
        </member>
        <member name="M:Boinc.BoincClient.ExitNode">
            <summary>
            Exits the current node, if the reader is standing on the node's value. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.SkipNode">
            <summary>
            Skips the next node, including all child nodes. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.SkipToEnd(System.String)">
            <summary>
            Skips to the end of the given node. 
            </summary>
            <param name="name">The node to skip to.</param>
        </member>
        <member name="M:Boinc.BoincClient.ReadValueAndExitNode">
            <summary>
            Reads the value of the current node as string, exits the node and
            returns the value. 
            </summary>
            <returns>The node's value</returns>
        </member>
        <member name="M:Boinc.BoincClient.ReadDoubleAndExitNode">
            <summary>
            Reads the value of the current node as double, exits the node and
            returns the value. 
            </summary>
            <returns>The node's value as double</returns>
        </member>
        <member name="M:Boinc.BoincClient.ReadIntAndExitNode">
            <summary>
            Reads the value of the current node as integer, exits the node and
            returns the value. 
            </summary>
            <returns>The node's value as integer</returns>
        </member>
        <member name="M:Boinc.BoincClient.ReadTimestampAndExitNode">
            <summary>
            Reads the value of the current node as DateTime, exits the node and
            returns the value. 
            </summary>
            <returns>The node's value as DateTime</returns>
        </member>
        <member name="M:Boinc.BoincClient.ReadTimespanAndExitNode">
            <summary>
            Reads the value of the current node as TimeSpan, exits the node and
            returns the value. 
            </summary>
            <returns>The node's value as TimeSpan</returns>
        </member>
        <member name="M:Boinc.BoincClient.GetResults(System.Boolean)">
            <summary>
            Gets all results.
            </summary>
            <param name="activeOnly">A bool indicating whether only active results should be returned.</param>
            <returns>An enumeration of Result objects.</returns>
        </member>
        <member name="M:Boinc.BoincClient.ParseResult">
            <summary>
            Parses a Result.
            </summary>
            <returns>The parsed Result object.</returns>
        </member>
        <member name="M:Boinc.BoincClient.DateFromUnixTime(System.Int64)">
            <summary>
            Converts a date given in unix time (seconds since 1970) to a DateTime object.
            </summary>
            <param name="seconds">The elapsed seconds since 1970.</param>
            <returns>The DateTime object generated.</returns>
        </member>
        <member name="M:Boinc.BoincClient.GetVersion">
            <summary>
            Gets the version information of Boinc. 
            </summary>
            <returns>The version information.</returns>
        </member>
        <member name="M:Boinc.BoincClient.QuitClient">
            <summary>
            Tells the Boinc application to quit. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.CheckConnection">
            <summary>
            Checks whether this client is connected to boinc. 
            Throws an InvalidOperationException if not. 
            </summary>
        </member>
        <member name="M:Boinc.BoincClient.WriteRpc(System.String)">
            <summary>
            Writes out the RPC request with the given name, 
            without any parameters. 
            </summary>
            <param name="rpcName">The RPC request to write</param>
        </member>
        <member name="M:Boinc.BoincClient.WriteRequest(Boinc.BoincClient.EmptyDelegate)">
            <summary>
            Writes the start tag of a Boinc request,
            then executes the given <paramref name="action"/>, then 
            writes the end tag of a Boinc request. 
            </summary>
            <param name="action">The action to execute, or null, if no action should be executed.</param>
        </member>
        <member name="M:Boinc.BoincClient.WriteElement(System.String,Boinc.BoincClient.EmptyDelegate)">
            <summary>
            Writes the start tag of an element,
            then executes the given <paramref name="action"/>, then 
            writes the end tag of an element.
            </summary>
            <param name="name">The name of the element to write.</param>
            <param name="action">The action to execute, or null, if no action should be executed.</param>
        </member>
        <member name="M:Boinc.BoincClient.Write(System.String)">
            <summary>
            Writes a raw string.
            </summary>
            <param name="raw">The string to write.</param>
        </member>
        <member name="M:Boinc.BoincClient.ReadReply(Boinc.BoincClient.EmptyDelegate,System.Boolean)">
            <summary>
            Reads the start tag of a Boinc reply,
            then executes the given <paramref name="action"/>, then 
            reads the end tag of a Boinc reply. 
            </summary>
            <param name="action">The action to execute, or null, if no action should be executed.</param>
            <param name="readEnd">A bool indicating whether the end tag should be read. Set this to false if the given action already reads the end tag of this node.</param>
        </member>
        <member name="M:Boinc.BoincClient.ReadElement(System.String,Boinc.BoincClient.EmptyDelegate,System.Boolean,System.Boolean)">
            <summary>
            Reads the start tag of an element,
            then executes the given <paramref name="action"/>, then 
            reads the end tag of an element.
            </summary>
            <param name="name">The name of the element to read.</param>
            <param name="action">The action to execute, or null, if no action should be executed.</param>
            <param name="readEnd">A bool indicating whether the end tag should be read. Set this to false if the given action already reads the end tag of this node.</param>
            <param name="throwOnUnexpected">A bool indicating whether an exception should be thrown when an unexpected tag is found. 
            If set to false, the method returns false in case of an error instead of throwing an exception.</param>
        </member>
        <member name="M:Boinc.BoincClient.ReadValue">
            <summary>
            Reads the value of the current node as raw string. 
            </summary>
            <returns>The value of the current node</returns>
        </member>
        <member name="P:Boinc.BoincClient.ProxySettings">
            <summary>
            Gets or sets the HTTP proxy settings. If the proxy settings are set, 
            the proxy settings of the underlying client are automatically changed. 
            </summary>
        </member>
        <member name="P:Boinc.BoincClient.IsConnected">
            <summary>
            Gets a boolean indicating whether this BoincClient is connected to Boinc. 
            </summary>
        </member>
        <member name="P:Boinc.BoincClient.BoincIsRunning">
            <summary>
            Gets a bool indicating whether Boinc is already running. 
            </summary>
        </member>
        <member name="T:Boinc.BoincClient.EmptyDelegate">
            <summary>
            An empty delegate, so we can use Lambda patterns for XML parsing
            </summary>
        </member>
        <member name="T:Boinc.BoincApiException">
            <summary>
            Represents a Boinc api exception. 
            </summary>
        </member>
        <member name="M:Boinc.BoincApiException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="message">The mesage of the exception.</param>
        </member>
        <member name="M:Boinc.BoincApiException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="message">The mesage of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            This attribute is required for using extension methods with while targeting .Net framework 2.0. 
            <remarks>
            This snipped has been taken from the LINQBridge project. 
            (http://code.google.com/p/linqbridge/)
            </remarks>
            </summary>
        </member>
        <member name="T:Boinc.BoincHelperExtensions">
            <summary>
            This class defines Xml writer and reader helper extensions for working with 
            the Boinc RPC format. 
            </summary>
        </member>
        <member name="F:Boinc.BoincHelperExtensions.GuiRpcRequestTag">
            <summary>
            The tag of a gui rpc request.
            </summary>
        </member>
        <member name="F:Boinc.BoincHelperExtensions.GuiRpcReplyTag">
            <summary>
            The tag of a gui rpc reply. 
            </summary>
        </member>
        <member name="F:Boinc.BoincHelperExtensions.EndBoincRequestCode">
            <summary>
            Ascii 0x03, End-Of-Text, used to indicate the end of Boinc requests and replies. 
            </summary>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.WriteStartBoincRequest(System.Xml.XmlWriter)">
            <summary>
            Writes the start tag of a boinc request. 
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.WriteEndBoincRequest(System.Xml.XmlWriter)">
            <summary>
            Writes the end tag of a boinc request and flushes afterwards.
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.WriteStartBoincElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes the start tag of the given element.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.WriteEndBoincElement(System.Xml.XmlWriter)">
            <summary>
            Writes the end tag of the given element.
            </summary>
            <param name="writer">The writer to write to.</param>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.ReadStartBoincReply(System.Xml.XmlReader)">
            <summary>
            Reads the start tag of a Boinc reply. 
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.ReadBoinc(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Reads a Boinc element tag. 
            </summary>
            <param name="expectedNode">The name of the node to read</param>
            <param name="throwOnUnexpected">A bool indicating whether an exception should be thrown when an unexpected tag is found. 
            If set to false, the method returns false in case of an error instead of throwing an exception</param>
            <param name="reader">The reader to read from.</param>
            <returns>A bool indicating success or error.</returns>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.ReadEndBoincReply(System.Xml.XmlReader)">
            <summary>
            Reads the end tag of a Boinc reply. 
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:Boinc.BoincHelperExtensions.EndSendBoincRequest(System.Net.Sockets.NetworkStream)">
            <summary>
            Forces the network stream to send out an ASCII 0x03 char (End-Of-Text).
            This method must be called after WriteEndBoincRequest has been called. 
            </summary>
            <param name="stream">The network to end the Boinc request for.</param>
        </member>
    </members>
</doc>
